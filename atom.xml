<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[亨利的博客]]></title>
  <link href="http:///atom.xml" rel="self"/>
  <link href="http:///"/>
  <updated>2017-10-03T00:34:19+08:00</updated>
  <id>http:///</id>
  <author>
    <name><![CDATA[Henry]]></name>
    <email><![CDATA[hwguo1988@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python包管理利器 —— Pip]]></title>
    <link href="http:///blog/2015/11/04/pip/"/>
    <updated>2015-11-04T22:39:15+08:00</updated>
    <id>http:///blog/2015/11/04/pip</id>
    <content type="html"><![CDATA[<h3>使用get-pip安装</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; curl -O https://bootstrap.pypa.io/get-pip.py
</span><span class='line'>&gt; python get-pip.py</span></code></pre></td></tr></table></div></figure>


<h3>使用源安装</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; sudo apt-get install python-pip
</span><span class='line'>&gt; 
</span><span class='line'>or:
</span><span class='line'>&gt; sudo yum install python-pip</span></code></pre></td></tr></table></div></figure>


<h3>使用</h3>

<h4>| 从PyPI安装软件包</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; pip install [package-name]</span></code></pre></td></tr></table></div></figure>


<h4>| 查看软件包信息</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; pip show [package-name]</span></code></pre></td></tr></table></div></figure>


<h4>| 查看哪些软件包已经有更新版本</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; pip list --outdated</span></code></pre></td></tr></table></div></figure>


<h4>| 升级软件包</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; pip install [—U | --upgrade] [package-name]</span></code></pre></td></tr></table></div></figure>


<h4>| 卸载软件包</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; pip uninstall [package-name]</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>高级用法</h3>

<h4>| 查询软件包</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; pip search [package-name]</span></code></pre></td></tr></table></div></figure>


<h4>| 列表全部已安装软件包</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; pip list</span></code></pre></td></tr></table></div></figure>


<h4>| <em>安装指定版本的软件包</em></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; pip install [package-name]==0.7.14     # 指定特定安装版本
</span><span class='line'>&gt; 
</span><span class='line'>&gt; pip install [package-name]&gt;=0.7.14     # 指定最小安装版本</span></code></pre></td></tr></table></div></figure>


<h4>| <em>根据依赖文件安装软件包</em></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; pip freeze &gt; requirements.txt
</span><span class='line'>&gt; 
</span><span class='line'>&gt; pip install -r requirements.txt</span></code></pre></td></tr></table></div></figure>


<h3>References</h3>

<p><a href="http://www.cnblogs.com/skynet/p/4135477.html">【1】优雅的使用Python之软件管理</a></p>

<div align=center>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=480 height=120 src="http://music.163.com/outchain/player?type=2&id=22688513&auto=1&height=66"></iframe>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[虚拟机CPU绑定设置]]></title>
    <link href="http:///blog/2015/10/05/vcpu-binding/"/>
    <updated>2015-10-05T17:32:46+08:00</updated>
    <id>http:///blog/2015/10/05/vcpu-binding</id>
    <content type="html"><![CDATA[<h2>1. VCPU信息查看</h2>

<h3>1.1 VCPU与CPU对应关系</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh vcpuinfo [vm_name]</span></code></pre></td></tr></table></div></figure>


<p>宿主机有一个物理CPU，8个物理核。此处的物理核，是指全部的逻辑CPU核，包括开启了超线程，即/proc/cpuinfo中列表的全部CPU核。如无特殊说明，下同。</p>

<p><img src="http://7vzrth.com1.z0.glb.clouddn.com/virsh_vcpuinfo_2.png" alt="center" /></p>

<p>如图可以看到，VCPU0被调度到物理核4上，VCPU1被调度到物理核5上。
CPU Affinity yyyyyyyy 代表物理核0~7均可以设置绑定，如果不可绑定会显示&#8217;-&lsquo;。</p>

<!-- more -->


<h3>1.2 查看虚拟机可使用的逻辑CPU核</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh emulatorpin [vm_name]</span></code></pre></td></tr></table></div></figure>


<p><img src="http://7vzrth.com1.z0.glb.clouddn.com/virsh_emulatorpin_2.png" alt="" /></p>

<p>如图同样可以看到0~7核均可以设置绑定</p>

<h2>2. VCPU在线绑定的方法</h2>

<h3>2.1 让VCPU只在部分物理核上调度</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh emulatorpin [vm_name] [num1-num2] --live</span></code></pre></td></tr></table></div></figure>


<p><img src="http://7vzrth.com1.z0.glb.clouddn.com/virsh_emulatorpin.png" alt="" /></p>

<p>此时，dumpxml，会在XML中显示出当前VCPU的绑定关系：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  ...
</span><span class='line'>  &lt;vcpu placement='static'&gt;2&lt;/vcpu&gt;
</span><span class='line'>    &lt;cputune&gt;
</span><span class='line'>      &lt;emulatorpin cpuset='6-7'/&gt;
</span><span class='line'>    &lt;/cputune&gt;
</span><span class='line'>  ...</span></code></pre></td></tr></table></div></figure>


<h3>2.2 VCPU与物理核一对一绑定</h3>

<p>通常的应用场景下，需要VCPU与物理核一对一绑定，使其它的VCPU不能争抢当前VCPU资源，实现资源配置的需求。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh vcpupin [vm_name] [VCPU_NUM] [CPU_NUM]</span></code></pre></td></tr></table></div></figure>


<p><img src="http://7vzrth.com1.z0.glb.clouddn.com/virsh_vcpuinfo.png" alt="" /></p>

<p>XML文件中会有如下变更：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  ...
</span><span class='line'>  &lt;vcpu placement='static'&gt;2&lt;/vcpu&gt;
</span><span class='line'>    &lt;cputune&gt;
</span><span class='line'>      &lt;vcpupin vcpu='0' cpuset='7'/&gt;
</span><span class='line'>      &lt;vcpupin vcpu='1' cpuset='6'/&gt;
</span><span class='line'>      &lt;emulatorpin cpuset='6-7'/&gt;
</span><span class='line'>    &lt;/cputune&gt;
</span><span class='line'>  ...</span></code></pre></td></tr></table></div></figure>


<p>执行virsh reboot使虚拟机重启，绑定关系依然存在。</p>

<h2>3. CPU绑定的原理</h2>

<p>上述的CPU绑定方法，是libvirt通过cgroup实现的，有关cgroup的介绍可以通过<a href="http://coolshell.cn/articles/17049.html">Docker基础技术：Linux CGroup</a>了解基本概念。</p>

<h2>4. CPU绑定的应用场景</h2>

<p>在虚拟机出现计算压力较大时，就可以考虑进行CPU的绑定。</p>

<p>例如，宿主机上运行着2台VM，VM1，VM2。VM1需要长时间跑一些压缩算法，CPU压力较大，VM2则做一些文件处理，主要瓶颈在I/O。这时，观察宿主机的物理CPU核的使用情况，发现CPU0 ~ CPU3的使用率在20%左右，而CPU4 ~ CPU7的使用率在80%左右，就可以考虑将VM1的VCPU绑定到CPU0 ~ CPU3，而将VM2的VCPU绑定到CPU4 ~ CPU7，这样可以使得需要大运算量的VM能够使用更多的计算资源，实现整体性能的提升。</p>

<h2>5. 版权声明</h2>

<p>本文内容的绝大部分节选自<a href="http://item.jd.com/11762844.html">《深度实践KVM》</a>的第三章，如有侵犯原作者权益，请联系本Blog.</p>

<h2>6. References</h2>

<p>[1] <a href="http://coolshell.cn/articles/17049.html">Docker基础技术：Linux CGroup</a></p>

<p>[2] <a href="http://item.jd.com/11762844.html">深度实践KVM：核心技术、管理运维、性能优化与项目实施</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Mid-Autumn Day]]></title>
    <link href="http:///blog/2015/09/26/happy-mid-autumn-day/"/>
    <updated>2015-09-26T22:30:02+08:00</updated>
    <id>http:///blog/2015/09/26/happy-mid-autumn-day</id>
    <content type="html"><![CDATA[<p><img src="http://7vzrth.com1.z0.glb.clouddn.com/Canton%20Tower.jpeg" alt="广州塔" /></p>

<!--more-->


<p>海珠 · 沿江 · 步行 · 呼吸 · 江风 · 望月 · 音乐 · 惬意</p>

<p><strong>中秋快乐</strong></p>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=500 height=86 src="http://music.163.com/outchain/player?type=2&id=386542&auto=1&height=66"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ceph RBD QoS]]></title>
    <link href="http:///blog/2015/09/23/ceph-rbd-qos/"/>
    <updated>2015-09-23T20:08:35+08:00</updated>
    <id>http:///blog/2015/09/23/ceph-rbd-qos</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>当前项目的私有云环境中，采用Ceph作为统一的后端存储。由于业务的种类繁多，经常会有部分虚机在某个时间段将宿主网卡吃满的情况。比如用户在VM内做大文件的拷贝，或者环境更新等。所以有必要对VM的I/O进行一定的资源限制，防止单宿主上VM间的网络I/O争抢。</p>

<h2>Ceph RBD QoS</h2>

<p>Qemu与KVM均提供对网络资源的限制支持，使用libvirt封装的接口可以更方便的实现对rbd设备的资源限制。
libvirt提供如下选项：</p>

<ul>
<li>total_bytes_sec: 混合模式下的带宽限制</li>
<li>read_bytes_sec: 顺序读带宽</li>
<li>write_bytes_sec: 顺序写带宽</li>
<li>total_iops_sec: 混合模式下的IOPS限制</li>
<li>read_iops_sec: 随机读IOPS</li>
<li>write_iops_sec: 随机写IOPS</li>
</ul>


<p>使用方法很简单：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  
</span><span class='line'>    &lt;disk type='network' device='disk'&gt;
</span><span class='line'>      &lt;driver name='qemu' type='raw' cache='writethrough'/&gt;
</span><span class='line'>      ...
</span><span class='line'>      &lt;source protocol='rbd' name='[pool_name]/[image_name]'&gt;
</span><span class='line'>      ...
</span><span class='line'>      &lt;/source&gt;
</span><span class='line'>      &lt;iotune&gt;
</span><span class='line'>        &lt;read_iops_sec&gt;20&lt;/read_iops_sec&gt;
</span><span class='line'>        &lt;write_iops_sec&gt;10&lt;/write_iops_sec&gt;
</span><span class='line'>      &lt;/iotune&gt;
</span><span class='line'>
</span><span class='line'>    ...</span></code></pre></td></tr></table></div></figure>


<p>在XML文件中添加&lt;iotune>标签，并设置相应的限制值即可</p>

<!--more-->


<h2>Test</h2>

<p>针对上述例子，在VM内部使用FIO测试对IOPS的限制</p>

<h4>随机读</h4>

<p><strong>> fio -filename=/dev/vdc1 -direct=1 -iodepth 1 -thread -rw=randread -ioengine=psync -bs=4k -size=200M -numjobs=30 -runtime=10 -group_reporting -name=randread_test </strong></p>

<p><img src="http://7vzrth.com1.z0.glb.clouddn.com/fio_randread_test.png" alt="随机读IOPS" /></p>

<h4>随机写</h4>

<p><strong>> fio -filename=/dev/vdc1 -direct=1 -iodepth 1 -thread -rw=randwrite -ioengine=psync -bs=4k -size=200M -numjobs=30 -runtime=10 -group_reporting -name=randwrite_test </strong></p>

<p><img src="http://7vzrth.com1.z0.glb.clouddn.com/fio_randwrite_test.png" alt="随机写IOPS" /></p>

<p>从测试可以看出，libvirt的接口可以很好地提供对RBD资源的限制</p>

<h2>References</h2>

<p>[1] <a href="http://ceph.com/planet/openstack-ceph-rbd-and-qos/">OpenStack, Ceph RBD and QoS</a></p>

<p>[2] <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a></p>

<p>[3] <a href="http://blog.itpub.net/26855487/viewspace-754346/">linux 使用FIO测试磁盘iops</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Os Variants List of Virt-install]]></title>
    <link href="http:///blog/2015/09/22/os-variants-list-of-virt-install/"/>
    <updated>2015-09-22T00:36:44+08:00</updated>
    <id>http:///blog/2015/09/22/os-variants-list-of-virt-install</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@cld-osd5-20:/home/henry# virt-install --os-variant list
</span><span class='line'>win2k8               : Microsoft Windows Server 2008 (or later)
</span><span class='line'>win2k3               : Microsoft Windows Server 2003
</span><span class='line'>win7                 : Microsoft Windows 7 (or later)
</span><span class='line'>vista                : Microsoft Windows Vista
</span><span class='line'>winxp64              : Microsoft Windows XP (x86_64)
</span><span class='line'>winxp                : Microsoft Windows XP
</span><span class='line'>win2k                : Microsoft Windows 2000
</span><span class='line'>openbsd4             : OpenBSD 4.x (or later)
</span><span class='line'>freebsd9             : FreeBSD 9.x
</span><span class='line'>freebsd8             : FreeBSD 8.x
</span><span class='line'>freebsd7             : FreeBSD 7.x
</span><span class='line'>freebsd6             : FreeBSD 6.x
</span><span class='line'>freebsd10            : FreeBSD 10.x (or later)
</span><span class='line'>solaris9             : Sun Solaris 9
</span><span class='line'>solaris11            : Sun Solaris 11 (or later)
</span><span class='line'>solaris10            : Sun Solaris 10
</span><span class='line'>opensolaris          : Sun OpenSolaris (or later)
</span><span class='line'>netware6             : Novell Netware 6 (or later)
</span><span class='line'>netware5             : Novell Netware 5
</span><span class='line'>netware4             : Novell Netware 4
</span><span class='line'>msdos                : MS-DOS
</span><span class='line'>generic              : Generic
</span><span class='line'>altlinux             : ALT Linux (or later)
</span><span class='line'>debianwheezy         : Debian Wheezy (or later)
</span><span class='line'>debiansqueeze        : Debian Squeeze
</span><span class='line'>debianlenny          : Debian Lenny
</span><span class='line'>debianetch           : Debian Etch
</span><span class='line'>fedora20             : Fedora 20 (or later)
</span><span class='line'>fedora19             : Fedora 19
</span><span class='line'>fedora18             : Fedora 18
</span><span class='line'>fedora17             : Fedora 17
</span><span class='line'>fedora16             : Fedora 16
</span><span class='line'>fedora15             : Fedora 15
</span><span class='line'>fedora14             : Fedora 14
</span><span class='line'>fedora13             : Fedora 13
</span><span class='line'>fedora12             : Fedora 12
</span><span class='line'>fedora11             : Fedora 11
</span><span class='line'>fedora10             : Fedora 10
</span><span class='line'>fedora9              : Fedora 9
</span><span class='line'>fedora8              : Fedora 8
</span><span class='line'>fedora7              : Fedora 7
</span><span class='line'>fedora6              : Fedora Core 6
</span><span class='line'>fedora5              : Fedora Core 5
</span><span class='line'>mes5.1               : Mandriva Enterprise Server 5.1 (or later)
</span><span class='line'>mes5                 : Mandriva Enterprise Server 5.0
</span><span class='line'>mandriva2010         : Mandriva Linux 2010 (or later)
</span><span class='line'>mandriva2009         : Mandriva Linux 2009 and earlier
</span><span class='line'>mageia1              : Mageia 1 (or later)
</span><span class='line'>rhel7                : Red Hat Enterprise Linux 7 (or later)
</span><span class='line'>rhel6                : Red Hat Enterprise Linux 6
</span><span class='line'>rhel5.4              : Red Hat Enterprise Linux 5.4 or later
</span><span class='line'>rhel5                : Red Hat Enterprise Linux 5
</span><span class='line'>rhel4                : Red Hat Enterprise Linux 4
</span><span class='line'>rhel3                : Red Hat Enterprise Linux 3
</span><span class='line'>rhel2.1              : Red Hat Enterprise Linux 2.1
</span><span class='line'>sles11               : Suse Linux Enterprise Server 11 (or later)
</span><span class='line'>sles10               : Suse Linux Enterprise Server
</span><span class='line'>opensuse12           : openSuse 12 (or later)
</span><span class='line'>opensuse11           : openSuse 11
</span><span class='line'>ubuntusaucy          : Ubuntu 13.10 (Saucy Salamander) (or later)
</span><span class='line'>ubunturaring         : Ubuntu 13.04 (Raring Ringtail)
</span><span class='line'>ubuntuquantal        : Ubuntu 12.10 (Quantal Quetzal)
</span><span class='line'>ubuntuprecise        : Ubuntu 12.04 LTS (Precise Pangolin)
</span><span class='line'>ubuntuoneiric        : Ubuntu 11.10 (Oneiric Ocelot)
</span><span class='line'>ubuntunatty          : Ubuntu 11.04 (Natty Narwhal)
</span><span class='line'>ubuntumaverick       : Ubuntu 10.10 (Maverick Meerkat)
</span><span class='line'>ubuntulucid          : Ubuntu 10.04 LTS (Lucid Lynx)
</span><span class='line'>ubuntukarmic         : Ubuntu 9.10 (Karmic Koala)
</span><span class='line'>ubuntujaunty         : Ubuntu 9.04 (Jaunty Jackalope)
</span><span class='line'>ubuntuintrepid       : Ubuntu 8.10 (Intrepid Ibex)
</span><span class='line'>ubuntuhardy          : Ubuntu 8.04 LTS (Hardy Heron)
</span><span class='line'>mbs1                 : Mandriva Business Server 1 (or later)
</span><span class='line'>virtio26             : Generic 2.6.25 or later kernel with virtio
</span><span class='line'>generic26            : Generic 2.6.x kernel
</span><span class='line'>generic24            : Generic 2.4.x kernel
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下查看系统空闲内存的方法]]></title>
    <link href="http:///blog/2015/05/31/linux-freemem/"/>
    <updated>2015-05-31T23:00:42+08:00</updated>
    <id>http:///blog/2015/05/31/linux-freemem</id>
    <content type="html"><![CDATA[<h2>1. free</h2>

<p>linux系统中，查看当前内存的使用情况，简便的方法是free命令，命令行中free -m，列出系统当前的可用内存、cache/buffer、swap相关信息。</p>

<p>free工具是procps项目提供的标准proc文件系统分析工具，通过读取分析/proc/meminfo，实时的反应当前系统的内存使用情况。项目主页：<a href="http://procps.sourceforge.net">procps.sourceforge.net</a></p>

<p><img src="http://pic.yupoo.com/taingg/EH1ELm9n/vG6TW.png" alt="free" /></p>

<!--more-->


<h2>2. 用户态程序中，利用sysinfo系统调用</h2>

<p>如果想在程序中实时查看系统当前可用内存情况，可以利用的方法也是多样的。</p>

<p>1.如果是在用户态程序中查看，可以通过“system”系统调用，执行free命令，或是读取/proc/meminfo文件，再做文本处理。</p>

<p>2.当然1的方法不够直观，/proc/meminfo中的信息是系统利用proc文件系统的处理函数获得的，内核代码fs/proc/meminfo.c中实现的。
粗读代码可以发现struct sysinfo这个结构（include/linux/kernel.h中定义）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct sysinfo {
</span><span class='line'>         long uptime;                    /* Seconds since boot */
</span><span class='line'>         unsigned long loads[3];         /* 1, 5, and 15 minute load averages */
</span><span class='line'>         unsigned long totalram;         /* Total usable main memory size */
</span><span class='line'>         unsigned long freeram;          /* Available memory size */
</span><span class='line'>         unsigned long sharedram;        /* Amount of shared memory */
</span><span class='line'>         unsigned long bufferram;        /* Memory used by buffers */
</span><span class='line'>         unsigned long totalswap;        /* Total swap space size */
</span><span class='line'>         unsigned long freeswap;         /* swap space still available */
</span><span class='line'>         unsigned short procs;           /* Number of current processes */
</span><span class='line'>         unsigned short pad;             /* explicit padding for m68k */
</span><span class='line'>         unsigned long totalhigh;        /* Total high memory size */
</span><span class='line'>         unsigned long freehigh;         /* Available high memory size */
</span><span class='line'>         unsigned int mem_unit;          /* Memory unit size in bytes */
</span><span class='line'>         char _f[20-2*sizeof(long)-sizeof(int)]; /* Padding: libc5 uses this.. */
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>可以看到该结构中定义了系统的内存使用情况。源码中查询sysinfo，发现有sysinfo这个系统调用，用于查询和获得系统信息。于是在用户态程序中可以采用如下方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;unistd.h&gt;
</span><span class='line'>#include &lt;linux/kernel.h&gt;
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    struct sysinfo sys_i;
</span><span class='line'>    int err = sysinfo(&sys_i);
</span><span class='line'>    printf("\n\nerror code is: %d\n", err);
</span><span class='line'>
</span><span class='line'>    printf( "free mem:\t%ld\n"                                                                               
</span><span class='line'>            "total mem:\t%ld\n"
</span><span class='line'>            "buffer mem:\t%ld\n", 
</span><span class='line'>            sys_i.freeram, sys_i.totalram, sys_i.bufferram 
</span><span class='line'>          );  
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>编译并执行：</p>

<p>~$ <strong><em>gcc -o play test.c</em></strong></p>

<p>对比执行结果与free的结果：
<img src="http://pic.yupoo.com/taingg/EH1SEQsN/xF8zK.png" alt="sysinfo与free对比" /></p>

<h2>3. 内核态程序中，利用do_sysinfo中的si_meminfo实现</h2>

<p>在内核态中实现，我没有找到很好的方法。通过读代码，找到执行sysinfo系统调用的回调函数sys_sysinfo</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SYSCALL_DEFINE1(sysinfo, struct sysinfo __user *, info)</span></code></pre></td></tr></table></div></figure>


<p>进一步宏展开SYSCALL_DEFINE1得到验证:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SYSCALL_DEFINE1(sysinfo, struct sysinfo __user *, info)
</span><span class='line'>{
</span><span class='line'>         struct sysinfo val;
</span><span class='line'> 
</span><span class='line'>         do_sysinfo(&val);
</span><span class='line'> 
</span><span class='line'>         if (copy_to_user(info, &val, sizeof(struct sysinfo)))
</span><span class='line'>                 return -EFAULT;
</span><span class='line'> 
</span><span class='line'>         return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>核心实现函数为do_sysinfo函数，该函数执行内容过多，为免除不必要操作，只利用与freeram相关的函数操作，即：si_meminfo函数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void si_meminfo(struct sysinfo *val)
</span><span class='line'>{
</span><span class='line'>         val-&gt;totalram = totalram_pages;
</span><span class='line'>         val-&gt;sharedram = 0;
</span><span class='line'>         val-&gt;freeram = global_page_state(NR_FREE_PAGES);
</span><span class='line'>         val-&gt;bufferram = nr_blockdev_pages();
</span><span class='line'>         val-&gt;totalhigh = totalhigh_pages;
</span><span class='line'>         val-&gt;freehigh = nr_free_highpages();
</span><span class='line'>         val-&gt;mem_unit = PAGE_SIZE;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>可以看到，sysinfo中的ram相关内容被赋值。写一个内核模块做测试:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;linux/init.h&gt;
</span><span class='line'>#include &lt;linux/module.h&gt;
</span><span class='line'>#include &lt;linux/kernel.h&gt;
</span><span class='line'>#include &lt;linux/mm.h&gt;
</span><span class='line'>#include &lt;asm/page.h&gt;
</span><span class='line'>
</span><span class='line'>MODULE_LICENSE("GPL");
</span><span class='line'>MODULE_AUTHOR("GuoHongwei");
</span><span class='line'>
</span><span class='line'>static int sysinfo_init()
</span><span class='line'>{
</span><span class='line'>    struct sysinfo sys;
</span><span class='line'>    // int err = do_sysinfo(&sys);
</span><span class='line'>
</span><span class='line'>    si_meminfo(&sys);
</span><span class='line'>
</span><span class='line'>    // printk("\n\nerror code is: %ld", err);
</span><span class='line'>    printk("free mem is: %ld\n", (sys.freeram &lt;&lt; (PAGE_SHIFT - 10)));
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static void sysinfo_exit()
</span><span class='line'>{
</span><span class='line'>    printk("exit module sysinfo_test\n");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>module_init(sysinfo_init);
</span><span class='line'>module_exit(sysinfo_exit);
</span><span class='line'>
</span><span class='line'>Makefile：
</span><span class='line'>obj-m := sysinfo_test.o
</span><span class='line'>KERNELDIR = /lib/modules/$(shell uname -r)/build                                                             
</span><span class='line'>PWD := $(shell pwd)
</span><span class='line'>
</span><span class='line'>default:
</span><span class='line'>        make -C $(KERNELDIR) M=$(PWD) modules
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>        make -C $(KERNELDIR) M=$(PWD) clean</span></code></pre></td></tr></table></div></figure>


<p>执行结果如下：</p>

<p><img src="http://pic.yupoo.com/taingg/EH1UAbNv/zQZ0M.png" alt="si_meminfo" /></p>
]]></content>
  </entry>
  
</feed>
